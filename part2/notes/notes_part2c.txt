Part 2C Getting data from server - AWESOME SECTION, YOU CAN LEARN A LOT OF IMPORTANT STUFF HERE
    Notes:
        1. we install an open source json-server using npm in our terminal
            npm install -g json-server
        2. create a db.json file in the route dir of the extras/part2b project, and run the json server
            npx json-server --port 3001 --watch db.json
        3. Check if the json server is running at the following url
            http://localhost:3001/notes
        4. If the above url doesn't display good json, try this chrome extension
            https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc
        5. The goal of the above steps is to make us used to the server stuff, and use the json-server to send and receive and store the data in db.json

    The browser as a runtime environment:
        1. in part0 example, we have got the json using an xhttprequest, however this is old and event based methods.
        2. We are now using a new architecture, in JS, called as promises, fetch.
            https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
        3. Learn synchronous, and asynchronous, their difference. TODO with examples
            https://javascript.info/callbacks
            https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
        4. JS engine is single threaded, so we usually allow asynchronous ways, but synchronous code is also possible.
        5. Don't block the browser in the synchronous methods using IO dependencies. Example code is below,
            setTimeout(() => {
            console.log('loop..')
            let i = 0
            while (i < 50000000000) {
                i++
            }
            console.log('end')
            }, 5000)
        6. Event Loops, Web Workers, and single threaded. info TODO
            https://www.youtube.com/watch?v=8aGhZQkoFbQ
            https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers
            https://medium.com/techtrument/multithreading-javascript-46156179cf9a
            Notes from the YT Video:
            a. JS v8 in runtime chrome
            b. JS (Heap(memory allocation) +Stack(execution contents))
            c. Stack -> Web API's (DOM, ajax, setTimeOut)
            d. Web API's -> Calback queues (onClick, onLoad, onDone)
            e. JS in single threaded, => single call stack
            f. Call Stack, example: 3 funcs (multiply + square + printSquare) 
            g. In stack, main -> printSquare -> square -> multiply
            h. so recently executed will be poped from the call stack
            i. calling a function recursively allowing stack overflow. 
            j. anything that's slower if its on the stack then its "blocking"
            k. synchronous functions on the stack will block the stack until the sunc function completes the execution
            l. the solution for this problem is the asynchronous callbacks Ex: setTimeOut
            m. The work flow of the above example, is where the EventLoop comes in.
            n. Remeber b, c, d. 
                Example:
                    console.log("Hi");
                    setTimeOut(function cb() {
                        console.log('there);
                    }, 5000);
                    console.log('JS');
                What Happens in the stack:-
                    main() -> stack
                    log -> stack -> print -> pop log
                    setTimeOut -> stack -> time -> webapis(running) -> pop setTimeOut
                    log -> stack -> pop
                    after 5 seconds -> webapis -> task queue -> if stack is empty, event loop pushes callback, then entry from task queue -> stack
                    stack -> pop log -> pop callback
            o. WOW!. The spearker wrote a tool to visualize the JS runtime in JS!.
            p. browser is repainting like a frampes per second. But our code messes with this.
            q. but the render is of higher prority, but it will be blocked during asynchronous events
            r. but call back allows events to be put into cb queue, and the render can be allowed to run in between.
            s. DONT BLOCK EVENT QUEUE

    npm
        1. fetch methods
            https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch
            a. returns the fullfilled promise if the response is available
            b. rejections occurs when there is a network error, but not on HTTP Errors like 404
            c. YT Video on fecth - Good explanation 
                https://www.youtube.com/watch?v=cuEtnrL9-H0
                I. pass url in fetch, second arg is options for methioning its GET or POST
                II. a method then on fetch can operate on the response returned
                III. fetch('').then(res => res.json()).then(res => console.log(res)).catch(error => console.log("ERROR"))
                IV. on 404, then above code will still work
                V. in options of fetch, metion the method,
                    fecth(URL, {
                        method: POST,
                        headers:{
                            'Content-Type': 'application/json'
                        }
                        body: JSON.stringify{
                            name: 'User1'
                        }
                    })
        2. axios library to make xhttp from browser, http from node.js
            npm install axios --save
            npm install json-server --save-dev
            a. the above install command will modify the package.json, more info follows
            b. NOTE: all JS packages are nowadays defined in npm
            c. when create-react-app is used, package.json is created with dependency infos
            d. while installing apps in npm is it installed in that project or all npm? guess only that project
            e. Ways to stop the running node.js servers 
                https://stackoverflow.com/questions/14790910/stop-all-instances-of-node-js-server
            f. third party lib 
                https://github.com/axios/axios
            g. 

    Axios and promises
        1. A Promise is an object representing the eventual completion or failure of an asynchronous operation.
        2. Promise has three states: pending, fullfilled, rejected
        3. The promise is pending: It means that the final value (one of the following two) is not available yet.
        4. The promise is fulfilled: It means that the operation has completed and the final value is available, which generally is a successful operation. This state is sometimes also called resolved.
        5. The promise is rejected: It means that an error prevented the final value from being determined, which generally represents a failed operation.
        6. The code in ectras/part2b has two axios.get, and one is resolved the other is rejected
        7. Example of a call back from exios success is in extras/part2b
        8. However don't use the ReactDOM.render inside an axios.get
    
    Effect-hooks
        1. https://reactjs.org/docs/hooks-state.html
        2. So effect hooks are new, more info is here,
            https://reactjs.org/docs/hooks-effect.html
        3. The Effect Hook lets you perform side effects in function components. Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects.
        4. an example of the useEffect is in part2b. It updates the setNotes on callback
        5. another way of writing an useEffect would be to pass a function as a variable to the method
        6. second argument needs more reading to be done. TODO  
            https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect
        7. the same callback code be passed as a function to 'then' method on the promise
        8. The sample code of the same can be found here
            https://github.com/fullstack-hy2020/part2-notes/tree/part2-4
    
    The development runtime environment
        https://fullstackopen.com/static/650087bbee40291069025432f1408a29/83317/18e.png
        1. Remember that the react code is being rendered by npm
        2. This is done such that the browser can understand the JS

    Exercises 2.11.-2.14.
        TODO Learn handling numeric auto generation package
        TODO how to set then unique keys an example

Time Spent Learning Part 2C: 230 Mins
Time Spent on Exercises: (Exercises 2.11.-2.14)
Cumulative Time for Part2: 340 + 230 +  Mins