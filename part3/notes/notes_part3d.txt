Part 3d Validation and ESLint
    Notes:-
        1. get request in index.js in extras/part3c holds an example how to check if the request sent ot the server has no body
        2. mongoose has a validation functionality
            https://mongoosejs.com/docs/validation.html
        3. For example, previously, we defined an object as follows inside a schema
            date : Date
            No, use the following,
                 date: { 
                    type: Date,
                    required: true
                },
        4. So there are builtin validators like minlength, and even custome new validators are allowed.
            https://mongoosejs.com/docs/validation.html#built-in-validators
            https://mongoosejs.com/docs/validation.html#custom-validators
        5. A sample example is in the note.js schema, Added a new condition for minlength of the content

    Promise chaining:-
        1. changing a nested ode to a cleaner syntax to support async/await conditions clearly, sample code si below
                .then(savedNote => {
                    return savedNote.toJSON()
                    })
                    .then(savedAndFormattedNote => {
                    response.json(savedAndFormattedNote)
                }) 
            is changed to the following,
                .then(savedNote => savedNote.toJSON())
                .then(savedAndFormattedNote => {
                response.json(savedAndFormattedNote)
                }) 
    
    Deploying the database backend to production:-
        1. sample code in deploying the complete app frontend+backend to heroku is in github repo,
            https://github.com/fullstack-hy2019/part3-notes-backend/tree/part3-5
    
    Exercises 3.19.-3.21.
        3.19: Phonebook database, step7                     - 20 Mins, Good Exercise and a fun one with app like postman
            https://github.com/blakehaswell/mongoose-unique-validator#readme
            // npm install --save mongoose-unique-validator
            BEWARE: res.status().join will throw error
            https://github.com/visionmedia/supertest/issues/416
            I changed the code to res.status().send() // TODO CHECK
        3.20 *: Phonebook database, step8                   - 60 Mins DONE,  Bit tricky, still only the css works, couldn't set the error message from the backend
            CSS error was there, fixed it by a new build from the frontend
        3.21 Deploying the database backend to production   - 30 Mins, A fun reminder on how to deploy again to the heroku
            DONE
            https://young-caverns-85015.herokuapp.com/
    
    Lint:-
        1. Lint and what is it. Simply it's used to fidn the errors
            https://en.wikipedia.org/wiki/Lint_(software)
        2. More info about, Static program analysis
                https://en.wikipedia.org/wiki/Static_program_analysis
            And about checkstyle,
                https://checkstyle.sourceforge.io/
                npm install eslint --save-dev
            then run the following command to generate the esling js file,
                node_modules/.bin/eslint --init
        3. add the npm lint command to the package.json scripts list
            npm script
        4. also add a new file to the project folder called .eslintignore
            inside it add build folder, like how we add entries to the.gitignore
        5. add the eslint-plugin to the editor to makes the fixes easier, from here for vscode
            https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint
        6. learn more about eslint rules from here
            https://eslint.org/docs/rules/
        7. Read more about style guides here,
            https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb
            https://github.com/airbnb/javascript
        8. completed sample code can be found here  
            https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-6
    
    Exercise 3.22.
        3.22: Lint configuration - 20 Mins a fun exercise, needs more personal learning about the style guides. But a fun one TODO
        

// npm install --save mongoose-unique-validator
// npm install eslint --save-dev
// from the folder where you want the eslint.js file do this, node_modules/.bin/eslint --init

Time Spent Learning Part 3d: 70 Mins
Time Spent on Exercises: 30+60+20+10 Mins(Exercises 3.19-3.22)
Cumulative Time for Part3: 210+270+470+190 Mins